#!/bin/bash
# AI开发规范 - Pre-commit检查
# 自动集成到所有项目的Git hooks

set -e

echo "🔍 执行AI开发规范pre-commit检查..."

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# 检查项目是否有CLAUDE.md配置文件
if [ ! -f "CLAUDE.md" ]; then
    print_error "缺少CLAUDE.md配置文件"
    echo "请运行以下命令创建:"
    echo "  bash /path/to/Development-Standards/scripts/init-project.sh $(pwd)"
    exit 1
fi

# 检查是否有暂存的文件
STAGED_FILES=$(git diff --cached --name-only)
if [ -z "$STAGED_FILES" ]; then
    print_warning "没有暂存的文件"
    exit 0
fi

# 检查提交的文件类型和规范
echo "📋 检查暂存文件:"
echo "$STAGED_FILES"

# 检查Agent项目特殊要求
if [ -f "docs/standards/AI_AGENT_DEVELOPMENT_GUIDE.md" ]; then
    echo "🤖 检测到Agent项目，执行Agent特殊检查..."
    
    # 检查是否有Agent PRD文件
    if ! find docs -name "*-Agent-PRD.md" | grep -q .; then
        print_warning "Agent项目建议创建PRD文档"
    fi
    
    # 检查Agent开发检查清单
    if [ ! -f "docs/AGENT_DEVELOPMENT_CHECKLIST.md" ]; then
        print_warning "建议使用Agent开发检查清单"
    fi
fi

# 检查代码质量（针对代码文件）
CODE_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|ts|py|java|go|rs|php)$' || true)
if [ ! -z "$CODE_FILES" ]; then
    echo "💻 检查代码文件..."
    
    # 检查是否包含TODO或FIXME
    TODO_FILES=$(git diff --cached | grep -l "TODO\|FIXME" || true)
    if [ ! -z "$TODO_FILES" ]; then
        print_warning "发现TODO/FIXME标记，请确认是否需要解决"
    fi
    
    # 检查是否包含调试信息
    DEBUG_FILES=$(git diff --cached | grep -l "console\.log\|print(\|debugger\|pdb\.set_trace" || true)
    if [ ! -z "$DEBUG_FILES" ]; then
        print_warning "发现可能的调试代码，请检查是否需要移除"
    fi
fi

# 检查文档文件
DOC_FILES=$(echo "$STAGED_FILES" | grep -E '\.md$' || true)
if [ ! -z "$DOC_FILES" ]; then
    echo "📝 检查文档文件..."
    
    # 检查CLAUDE.md是否被修改
    if echo "$STAGED_FILES" | grep -q "CLAUDE.md"; then
        print_success "CLAUDE.md配置文件已更新"
    fi
fi

# 检查配置文件
CONFIG_FILES=$(echo "$STAGED_FILES" | grep -E '\.(json|yaml|yml|toml|ini|conf)$' || true)
if [ ! -z "$CONFIG_FILES" ]; then
    echo "⚙️  检查配置文件..."
    
    # 检查JSON文件语法
    JSON_FILES=$(echo "$CONFIG_FILES" | grep -E '\.json$' || true)
    for file in $JSON_FILES; do
        if [ -f "$file" ]; then
            if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
                print_error "JSON文件语法错误: $file"
                exit 1
            fi
        fi
    done
fi

# 提交信息建议（如果需要）
echo ""
echo "💡 提交信息建议格式:"
echo "   类型: 简短描述"
echo "   "
echo "   详细说明（可选）"
echo "   "
echo "   类型可选: feat, fix, docs, style, refactor, test, chore"

print_success "Pre-commit检查通过"
echo ""